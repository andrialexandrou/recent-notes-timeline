/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => RecentNotesTimelinePlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// view.ts
var import_obsidian = __toModule(require("obsidian"));
var VIEW_TYPE_TIMELINE = "recent-notes-timeline-view";
var TimelineView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.icon = "clock";
    this.plugin = plugin;
    this.refreshInterval = -1;
  }
  getViewType() {
    return VIEW_TYPE_TIMELINE;
  }
  getDisplayText() {
    return "Recent Notes Timeline";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("recent-notes-timeline");
    const contentWrapper = container.createDiv({ cls: "timeline-wrapper" });
    const header = contentWrapper.createDiv({ cls: "timeline-header" });
    const titleContainer = header.createDiv({ cls: "timeline-title-container" });
    const title = titleContainer.createEl("h2", {
      cls: "timeline-title",
      text: "Recent Notes Timeline"
    });
    const subtitle = titleContainer.createEl("p", {
      cls: "timeline-subtitle",
      text: "Your latest updates and creations"
    });
    const statsContainer = header.createDiv({ cls: "timeline-stats" });
    const refreshButton = header.createEl("button", {
      cls: "timeline-refresh-button",
      attr: { "aria-label": "Refresh timeline" }
    });
    refreshButton.innerHTML = "\u21BB";
    refreshButton.addEventListener("click", () => this.refreshTimeline());
    this.contentEl = contentWrapper.createDiv({ cls: "timeline-content" });
    await this.refreshTimeline();
    this.updateStats(statsContainer);
    this.refreshInterval = window.setInterval(() => {
      this.refreshTimeline().then(() => {
        this.updateStats(statsContainer);
      });
    }, 5 * 60 * 1e3);
    this.registerEvent(this.app.vault.on("modify", () => {
      this.refreshTimeline().then(() => {
        this.updateStats(statsContainer);
      });
    }));
    this.registerEvent(this.app.vault.on("create", () => {
      this.refreshTimeline().then(() => {
        this.updateStats(statsContainer);
      });
    }));
  }
  updateStats(container) {
    container.empty();
    const files = this.app.vault.getMarkdownFiles();
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1e3;
    const lastDay = files.filter((file) => now - file.stat.mtime < dayInMs).length;
    const lastWeek = files.filter((file) => now - file.stat.mtime < 7 * dayInMs).length;
    const lastMonth = files.filter((file) => now - file.stat.mtime < 30 * dayInMs).length;
    const daySpan = container.createSpan({ cls: "timeline-stat" });
    daySpan.createSpan({ cls: "timeline-stat-value", text: lastDay.toString() });
    daySpan.createSpan({ cls: "timeline-stat-label", text: " today" });
    const weekSpan = container.createSpan({ cls: "timeline-stat" });
    weekSpan.createSpan({ cls: "timeline-stat-value", text: lastWeek.toString() });
    weekSpan.createSpan({ cls: "timeline-stat-label", text: " this week" });
    const monthSpan = container.createSpan({ cls: "timeline-stat" });
    monthSpan.createSpan({ cls: "timeline-stat-value", text: lastMonth.toString() });
    monthSpan.createSpan({ cls: "timeline-stat-label", text: " this month" });
  }
  async onClose() {
    if (this.refreshInterval !== -1) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = -1;
    }
  }
  async refreshTimeline() {
    this.contentEl.empty();
    const notes = this.getNoteInfos();
    if (notes.length === 0) {
      this.contentEl.createEl("p", {
        text: "No recent notes found.",
        cls: "timeline-empty-message"
      });
      return;
    }
    this.buildTimelineUI(notes);
  }
  getNoteInfos() {
    const notes = [];
    const files = this.app.vault.getMarkdownFiles();
    for (const file of files) {
      const createdTime = file.stat.ctime;
      const modifiedTime = file.stat.mtime;
      const timestamp = Math.max(createdTime, modifiedTime);
      const isCreated = createdTime >= modifiedTime;
      notes.push({
        file,
        timestamp,
        isCreated
      });
    }
    return notes.sort((a, b) => b.timestamp - a.timestamp);
  }
  buildTimelineUI(notes) {
    let currentDate = "";
    const currentYear = new Date().getFullYear();
    for (const note of notes) {
      const date = new Date(note.timestamp);
      const month = date.toLocaleString("en-US", { month: "long" });
      const day = date.getDate();
      const year = date.getFullYear();
      let dateString = `${month} ${day}`;
      if (year !== currentYear) {
        dateString += `, ${year}`;
      }
      if (dateString !== currentDate) {
        currentDate = dateString;
        this.contentEl.createEl("div", {
          cls: "timeline-date-separator",
          text: currentDate
        });
      }
      const entry = this.contentEl.createDiv({ cls: "timeline-entry" });
      const infoSection = entry.createDiv({ cls: "timeline-entry-info" });
      const contentSection = infoSection.createDiv({ cls: "timeline-entry-content" });
      const titleEl = contentSection.createEl("a", {
        cls: "timeline-entry-title",
        text: note.file.basename,
        attr: {
          "data-path": note.file.path,
          "aria-label": `Open note: ${note.file.basename}`
        }
      });
      titleEl.addEventListener("click", (event) => {
        event.preventDefault();
        this.app.workspace.openLinkText(note.file.path, "", false);
      });
      const metaInfo = contentSection.createDiv({ cls: "timeline-entry-meta" });
      const actionEl = metaInfo.createEl("span", {
        cls: "timeline-entry-action",
        text: note.isCreated ? "Created" : "Modified"
      });
      const timeEl = metaInfo.createEl("span", {
        cls: "timeline-entry-time",
        text: date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
      });
      this.getFilePreview(note.file).then((preview) => {
        if (preview) {
          const previewEl = entry.createDiv({
            cls: "timeline-entry-preview"
          });
          import_obsidian.MarkdownRenderer.renderMarkdown(preview, previewEl, note.file.path, this);
        }
      });
    }
  }
  async getFilePreview(file) {
    try {
      const content = await this.app.vault.read(file);
      const lines = content.split("\n").slice(0, 7);
      let preview = lines.join("\n");
      if (content.split("\n").length > 7) {
        preview += "\n\n*...*";
      }
      return preview;
    } catch (error) {
      return null;
    }
  }
};

// main.ts
var RecentNotesTimelinePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.registerView(VIEW_TYPE_TIMELINE, (leaf) => new TimelineView(leaf, this));
    this.addRibbonIcon("clock", "Recent Notes Timeline", () => {
      this.activateView();
    });
    this.addCommand({
      id: "show-recent-notes-timeline",
      name: "Show Recent Notes Timeline",
      callback: () => {
        this.activateView();
      }
    });
    this.app.workspace.onLayoutReady(() => {
      if (this.app.workspace.getLeavesOfType("markdown").length === 0) {
        this.activateView();
      }
    });
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_TIMELINE);
  }
  async activateView() {
    const existing = this.app.workspace.getLeavesOfType(VIEW_TYPE_TIMELINE);
    if (existing.length) {
      this.app.workspace.revealLeaf(existing[0]);
      return;
    }
    const leaf = this.app.workspace.getLeaf("tab");
    await leaf.setViewState({
      type: VIEW_TYPE_TIMELINE,
      active: true
    });
    this.app.workspace.revealLeaf(leaf);
  }
};
//# sourceMappingURL=data:application/json;base64,
